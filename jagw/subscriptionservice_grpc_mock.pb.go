// Code generated by MockGen. DO NOT EDIT.
// Source: subscriptionservice_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source subscriptionservice_grpc.pb.go -destination subscriptionservice_grpc_mock.pb.go -package jagw
//

// Package jagw is a generated GoMock package.
package jagw

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSubscriptionServiceClient is a mock of SubscriptionServiceClient interface.
type MockSubscriptionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceClientMockRecorder
}

// MockSubscriptionServiceClientMockRecorder is the mock recorder for MockSubscriptionServiceClient.
type MockSubscriptionServiceClientMockRecorder struct {
	mock *MockSubscriptionServiceClient
}

// NewMockSubscriptionServiceClient creates a new mock instance.
func NewMockSubscriptionServiceClient(ctrl *gomock.Controller) *MockSubscriptionServiceClient {
	mock := &MockSubscriptionServiceClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionServiceClient) EXPECT() *MockSubscriptionServiceClientMockRecorder {
	return m.recorder
}

// SubscribeToLsLinks mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToLsLinks(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsLinksClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToLsLinks", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToLsLinksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLsLinks indicates an expected call of SubscribeToLsLinks.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToLsLinks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsLinks", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToLsLinks), varargs...)
}

// SubscribeToLsNodeEdges mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToLsNodeEdges(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodeEdgesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToLsNodeEdges", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToLsNodeEdgesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLsNodeEdges indicates an expected call of SubscribeToLsNodeEdges.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToLsNodeEdges(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsNodeEdges", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToLsNodeEdges), varargs...)
}

// SubscribeToLsNodes mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToLsNodes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToLsNodes", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToLsNodesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLsNodes indicates an expected call of SubscribeToLsNodes.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToLsNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsNodes", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToLsNodes), varargs...)
}

// SubscribeToLsPrefixes mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToLsPrefixes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsPrefixesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToLsPrefixes", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToLsPrefixesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLsPrefixes indicates an expected call of SubscribeToLsPrefixes.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToLsPrefixes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsPrefixes", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToLsPrefixes), varargs...)
}

// SubscribeToLsSrv6Sids mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToLsSrv6Sids(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsSrv6SidsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToLsSrv6Sids", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToLsSrv6SidsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLsSrv6Sids indicates an expected call of SubscribeToLsSrv6Sids.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToLsSrv6Sids(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsSrv6Sids", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToLsSrv6Sids), varargs...)
}

// SubscribeToPeers mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToPeers(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToPeersClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToPeers", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToPeersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToPeers indicates an expected call of SubscribeToPeers.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToPeers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToPeers", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToPeers), varargs...)
}

// SubscribeToTelemetryData mocks base method.
func (m *MockSubscriptionServiceClient) SubscribeToTelemetryData(ctx context.Context, in *TelemetrySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToTelemetryDataClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToTelemetryData", varargs...)
	ret0, _ := ret[0].(SubscriptionService_SubscribeToTelemetryDataClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTelemetryData indicates an expected call of SubscribeToTelemetryData.
func (mr *MockSubscriptionServiceClientMockRecorder) SubscribeToTelemetryData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTelemetryData", reflect.TypeOf((*MockSubscriptionServiceClient)(nil).SubscribeToTelemetryData), varargs...)
}

// MockSubscriptionService_SubscribeToLsNodesClient is a mock of SubscriptionService_SubscribeToLsNodesClient interface.
type MockSubscriptionService_SubscribeToLsNodesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder
}

// MockSubscriptionService_SubscribeToLsNodesClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsNodesClient.
type MockSubscriptionService_SubscribeToLsNodesClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsNodesClient
}

// NewMockSubscriptionService_SubscribeToLsNodesClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsNodesClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsNodesClient {
	mock := &MockSubscriptionService_SubscribeToLsNodesClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsNodesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) EXPECT() *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) Recv() (*LsNodeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LsNodeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToLsNodesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToLsLinksClient is a mock of SubscriptionService_SubscribeToLsLinksClient interface.
type MockSubscriptionService_SubscribeToLsLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder
}

// MockSubscriptionService_SubscribeToLsLinksClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsLinksClient.
type MockSubscriptionService_SubscribeToLsLinksClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsLinksClient
}

// NewMockSubscriptionService_SubscribeToLsLinksClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsLinksClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsLinksClient {
	mock := &MockSubscriptionService_SubscribeToLsLinksClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) EXPECT() *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) Recv() (*LsLinkEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LsLinkEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsLinksClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsLinksClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToLsLinksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToLsPrefixesClient is a mock of SubscriptionService_SubscribeToLsPrefixesClient interface.
type MockSubscriptionService_SubscribeToLsPrefixesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder
}

// MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsPrefixesClient.
type MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsPrefixesClient
}

// NewMockSubscriptionService_SubscribeToLsPrefixesClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsPrefixesClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsPrefixesClient {
	mock := &MockSubscriptionService_SubscribeToLsPrefixesClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) EXPECT() *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) Recv() (*LsPrefixEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LsPrefixEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsPrefixesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsPrefixesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToLsSrv6SidsClient is a mock of SubscriptionService_SubscribeToLsSrv6SidsClient interface.
type MockSubscriptionService_SubscribeToLsSrv6SidsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder
}

// MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsSrv6SidsClient.
type MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsSrv6SidsClient
}

// NewMockSubscriptionService_SubscribeToLsSrv6SidsClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsSrv6SidsClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsSrv6SidsClient {
	mock := &MockSubscriptionService_SubscribeToLsSrv6SidsClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) EXPECT() *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) Recv() (*LsSrv6SidEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LsSrv6SidEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsSrv6SidsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsSrv6SidsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToLsNodeEdgesClient is a mock of SubscriptionService_SubscribeToLsNodeEdgesClient interface.
type MockSubscriptionService_SubscribeToLsNodeEdgesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder
}

// MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsNodeEdgesClient.
type MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsNodeEdgesClient
}

// NewMockSubscriptionService_SubscribeToLsNodeEdgesClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsNodeEdgesClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsNodeEdgesClient {
	mock := &MockSubscriptionService_SubscribeToLsNodeEdgesClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) EXPECT() *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) Recv() (*LsNodeEdgeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LsNodeEdgeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodeEdgesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodeEdgesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToPeersClient is a mock of SubscriptionService_SubscribeToPeersClient interface.
type MockSubscriptionService_SubscribeToPeersClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToPeersClientMockRecorder
}

// MockSubscriptionService_SubscribeToPeersClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToPeersClient.
type MockSubscriptionService_SubscribeToPeersClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToPeersClient
}

// NewMockSubscriptionService_SubscribeToPeersClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToPeersClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToPeersClient {
	mock := &MockSubscriptionService_SubscribeToPeersClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToPeersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToPeersClient) EXPECT() *MockSubscriptionService_SubscribeToPeersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersClient) Recv() (*PeerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PeerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToPeersClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToPeersClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToPeersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersClient)(nil).Trailer))
}

// MockSubscriptionService_SubscribeToTelemetryDataClient is a mock of SubscriptionService_SubscribeToTelemetryDataClient interface.
type MockSubscriptionService_SubscribeToTelemetryDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder
}

// MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToTelemetryDataClient.
type MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToTelemetryDataClient
}

// NewMockSubscriptionService_SubscribeToTelemetryDataClient creates a new mock instance.
func NewMockSubscriptionService_SubscribeToTelemetryDataClient(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToTelemetryDataClient {
	mock := &MockSubscriptionService_SubscribeToTelemetryDataClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) EXPECT() *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) Recv() (*TelemetryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TelemetryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToTelemetryDataClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToTelemetryDataClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataClient)(nil).Trailer))
}

// MockSubscriptionServiceServer is a mock of SubscriptionServiceServer interface.
type MockSubscriptionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceServerMockRecorder
}

// MockSubscriptionServiceServerMockRecorder is the mock recorder for MockSubscriptionServiceServer.
type MockSubscriptionServiceServerMockRecorder struct {
	mock *MockSubscriptionServiceServer
}

// NewMockSubscriptionServiceServer creates a new mock instance.
func NewMockSubscriptionServiceServer(ctrl *gomock.Controller) *MockSubscriptionServiceServer {
	mock := &MockSubscriptionServiceServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionServiceServer) EXPECT() *MockSubscriptionServiceServerMockRecorder {
	return m.recorder
}

// SubscribeToLsLinks mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToLsLinks(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToLsLinksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLsLinks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLsLinks indicates an expected call of SubscribeToLsLinks.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToLsLinks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsLinks", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToLsLinks), arg0, arg1)
}

// SubscribeToLsNodeEdges mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToLsNodeEdges(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToLsNodeEdgesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLsNodeEdges", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLsNodeEdges indicates an expected call of SubscribeToLsNodeEdges.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToLsNodeEdges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsNodeEdges", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToLsNodeEdges), arg0, arg1)
}

// SubscribeToLsNodes mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToLsNodes(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToLsNodesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLsNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLsNodes indicates an expected call of SubscribeToLsNodes.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToLsNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsNodes", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToLsNodes), arg0, arg1)
}

// SubscribeToLsPrefixes mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToLsPrefixes(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToLsPrefixesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLsPrefixes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLsPrefixes indicates an expected call of SubscribeToLsPrefixes.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToLsPrefixes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsPrefixes", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToLsPrefixes), arg0, arg1)
}

// SubscribeToLsSrv6Sids mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToLsSrv6Sids(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToLsSrv6SidsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLsSrv6Sids", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLsSrv6Sids indicates an expected call of SubscribeToLsSrv6Sids.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToLsSrv6Sids(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLsSrv6Sids", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToLsSrv6Sids), arg0, arg1)
}

// SubscribeToPeers mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToPeers(arg0 *TopologySubscription, arg1 SubscriptionService_SubscribeToPeersServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToPeers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToPeers indicates an expected call of SubscribeToPeers.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToPeers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToPeers", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToPeers), arg0, arg1)
}

// SubscribeToTelemetryData mocks base method.
func (m *MockSubscriptionServiceServer) SubscribeToTelemetryData(arg0 *TelemetrySubscription, arg1 SubscriptionService_SubscribeToTelemetryDataServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTelemetryData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTelemetryData indicates an expected call of SubscribeToTelemetryData.
func (mr *MockSubscriptionServiceServerMockRecorder) SubscribeToTelemetryData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTelemetryData", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).SubscribeToTelemetryData), arg0, arg1)
}

// mustEmbedUnimplementedSubscriptionServiceServer mocks base method.
func (m *MockSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSubscriptionServiceServer")
}

// mustEmbedUnimplementedSubscriptionServiceServer indicates an expected call of mustEmbedUnimplementedSubscriptionServiceServer.
func (mr *MockSubscriptionServiceServerMockRecorder) mustEmbedUnimplementedSubscriptionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSubscriptionServiceServer", reflect.TypeOf((*MockSubscriptionServiceServer)(nil).mustEmbedUnimplementedSubscriptionServiceServer))
}

// MockUnsafeSubscriptionServiceServer is a mock of UnsafeSubscriptionServiceServer interface.
type MockUnsafeSubscriptionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSubscriptionServiceServerMockRecorder
}

// MockUnsafeSubscriptionServiceServerMockRecorder is the mock recorder for MockUnsafeSubscriptionServiceServer.
type MockUnsafeSubscriptionServiceServerMockRecorder struct {
	mock *MockUnsafeSubscriptionServiceServer
}

// NewMockUnsafeSubscriptionServiceServer creates a new mock instance.
func NewMockUnsafeSubscriptionServiceServer(ctrl *gomock.Controller) *MockUnsafeSubscriptionServiceServer {
	mock := &MockUnsafeSubscriptionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSubscriptionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSubscriptionServiceServer) EXPECT() *MockUnsafeSubscriptionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSubscriptionServiceServer mocks base method.
func (m *MockUnsafeSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSubscriptionServiceServer")
}

// mustEmbedUnimplementedSubscriptionServiceServer indicates an expected call of mustEmbedUnimplementedSubscriptionServiceServer.
func (mr *MockUnsafeSubscriptionServiceServerMockRecorder) mustEmbedUnimplementedSubscriptionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSubscriptionServiceServer", reflect.TypeOf((*MockUnsafeSubscriptionServiceServer)(nil).mustEmbedUnimplementedSubscriptionServiceServer))
}

// MockSubscriptionService_SubscribeToLsNodesServer is a mock of SubscriptionService_SubscribeToLsNodesServer interface.
type MockSubscriptionService_SubscribeToLsNodesServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder
}

// MockSubscriptionService_SubscribeToLsNodesServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsNodesServer.
type MockSubscriptionService_SubscribeToLsNodesServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsNodesServer
}

// NewMockSubscriptionService_SubscribeToLsNodesServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsNodesServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsNodesServer {
	mock := &MockSubscriptionService_SubscribeToLsNodesServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsNodesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) EXPECT() *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) Send(arg0 *LsNodeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToLsNodesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodesServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToLsLinksServer is a mock of SubscriptionService_SubscribeToLsLinksServer interface.
type MockSubscriptionService_SubscribeToLsLinksServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder
}

// MockSubscriptionService_SubscribeToLsLinksServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsLinksServer.
type MockSubscriptionService_SubscribeToLsLinksServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsLinksServer
}

// NewMockSubscriptionService_SubscribeToLsLinksServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsLinksServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsLinksServer {
	mock := &MockSubscriptionService_SubscribeToLsLinksServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsLinksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) EXPECT() *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsLinksServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) Send(arg0 *LsLinkEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsLinksServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsLinksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToLsLinksServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsLinksServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToLsPrefixesServer is a mock of SubscriptionService_SubscribeToLsPrefixesServer interface.
type MockSubscriptionService_SubscribeToLsPrefixesServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder
}

// MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsPrefixesServer.
type MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsPrefixesServer
}

// NewMockSubscriptionService_SubscribeToLsPrefixesServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsPrefixesServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsPrefixesServer {
	mock := &MockSubscriptionService_SubscribeToLsPrefixesServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) EXPECT() *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsPrefixesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) Send(arg0 *LsPrefixEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsPrefixesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsPrefixesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToLsPrefixesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsPrefixesServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToLsSrv6SidsServer is a mock of SubscriptionService_SubscribeToLsSrv6SidsServer interface.
type MockSubscriptionService_SubscribeToLsSrv6SidsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder
}

// MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsSrv6SidsServer.
type MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsSrv6SidsServer
}

// NewMockSubscriptionService_SubscribeToLsSrv6SidsServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsSrv6SidsServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsSrv6SidsServer {
	mock := &MockSubscriptionService_SubscribeToLsSrv6SidsServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) EXPECT() *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsSrv6SidsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) Send(arg0 *LsSrv6SidEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsSrv6SidsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsSrv6SidsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToLsSrv6SidsServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsSrv6SidsServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToLsNodeEdgesServer is a mock of SubscriptionService_SubscribeToLsNodeEdgesServer interface.
type MockSubscriptionService_SubscribeToLsNodeEdgesServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder
}

// MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToLsNodeEdgesServer.
type MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToLsNodeEdgesServer
}

// NewMockSubscriptionService_SubscribeToLsNodeEdgesServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToLsNodeEdgesServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToLsNodeEdgesServer {
	mock := &MockSubscriptionService_SubscribeToLsNodeEdgesServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) EXPECT() *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodeEdgesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) Send(arg0 *LsNodeEdgeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToLsNodeEdgesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToLsNodeEdgesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToLsNodeEdgesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToLsNodeEdgesServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToPeersServer is a mock of SubscriptionService_SubscribeToPeersServer interface.
type MockSubscriptionService_SubscribeToPeersServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToPeersServerMockRecorder
}

// MockSubscriptionService_SubscribeToPeersServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToPeersServer.
type MockSubscriptionService_SubscribeToPeersServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToPeersServer
}

// NewMockSubscriptionService_SubscribeToPeersServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToPeersServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToPeersServer {
	mock := &MockSubscriptionService_SubscribeToPeersServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToPeersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToPeersServer) EXPECT() *MockSubscriptionService_SubscribeToPeersServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToPeersServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersServer) Send(arg0 *PeerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToPeersServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToPeersServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToPeersServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToPeersServer)(nil).SetTrailer), arg0)
}

// MockSubscriptionService_SubscribeToTelemetryDataServer is a mock of SubscriptionService_SubscribeToTelemetryDataServer interface.
type MockSubscriptionService_SubscribeToTelemetryDataServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder
}

// MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder is the mock recorder for MockSubscriptionService_SubscribeToTelemetryDataServer.
type MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder struct {
	mock *MockSubscriptionService_SubscribeToTelemetryDataServer
}

// NewMockSubscriptionService_SubscribeToTelemetryDataServer creates a new mock instance.
func NewMockSubscriptionService_SubscribeToTelemetryDataServer(ctrl *gomock.Controller) *MockSubscriptionService_SubscribeToTelemetryDataServer {
	mock := &MockSubscriptionService_SubscribeToTelemetryDataServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) EXPECT() *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToTelemetryDataServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) Send(arg0 *TelemetryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSubscriptionService_SubscribeToTelemetryDataServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSubscriptionService_SubscribeToTelemetryDataServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSubscriptionService_SubscribeToTelemetryDataServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSubscriptionService_SubscribeToTelemetryDataServer)(nil).SetTrailer), arg0)
}
