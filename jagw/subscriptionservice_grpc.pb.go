// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: subscriptionservice/subscriptionservice.proto

package jagw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SubscriptionService_SubscribeToLsNodes_FullMethodName       = "/jagw.SubscriptionService/SubscribeToLsNodes"
	SubscriptionService_SubscribeToLsLinks_FullMethodName       = "/jagw.SubscriptionService/SubscribeToLsLinks"
	SubscriptionService_SubscribeToLsPrefixes_FullMethodName    = "/jagw.SubscriptionService/SubscribeToLsPrefixes"
	SubscriptionService_SubscribeToLsSrv6Sids_FullMethodName    = "/jagw.SubscriptionService/SubscribeToLsSrv6Sids"
	SubscriptionService_SubscribeToLsNodeEdges_FullMethodName   = "/jagw.SubscriptionService/SubscribeToLsNodeEdges"
	SubscriptionService_SubscribeToPeers_FullMethodName         = "/jagw.SubscriptionService/SubscribeToPeers"
	SubscriptionService_SubscribeToTelemetryData_FullMethodName = "/jagw.SubscriptionService/SubscribeToTelemetryData"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	SubscribeToLsNodes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodesClient, error)
	SubscribeToLsLinks(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsLinksClient, error)
	SubscribeToLsPrefixes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsPrefixesClient, error)
	SubscribeToLsSrv6Sids(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsSrv6SidsClient, error)
	SubscribeToLsNodeEdges(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodeEdgesClient, error)
	SubscribeToPeers(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToPeersClient, error)
	SubscribeToTelemetryData(ctx context.Context, in *TelemetrySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToTelemetryDataClient, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) SubscribeToLsNodes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[0], SubscriptionService_SubscribeToLsNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLsNodesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLsNodesClient interface {
	Recv() (*LsNodeEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLsNodesClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLsNodesClient) Recv() (*LsNodeEvent, error) {
	m := new(LsNodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLsLinks(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsLinksClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[1], SubscriptionService_SubscribeToLsLinks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLsLinksClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLsLinksClient interface {
	Recv() (*LsLinkEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLsLinksClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLsLinksClient) Recv() (*LsLinkEvent, error) {
	m := new(LsLinkEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLsPrefixes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsPrefixesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[2], SubscriptionService_SubscribeToLsPrefixes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLsPrefixesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLsPrefixesClient interface {
	Recv() (*LsPrefixEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLsPrefixesClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLsPrefixesClient) Recv() (*LsPrefixEvent, error) {
	m := new(LsPrefixEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLsSrv6Sids(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsSrv6SidsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[3], SubscriptionService_SubscribeToLsSrv6Sids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLsSrv6SidsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLsSrv6SidsClient interface {
	Recv() (*LsSrv6SidEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLsSrv6SidsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLsSrv6SidsClient) Recv() (*LsSrv6SidEvent, error) {
	m := new(LsSrv6SidEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLsNodeEdges(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLsNodeEdgesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[4], SubscriptionService_SubscribeToLsNodeEdges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLsNodeEdgesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLsNodeEdgesClient interface {
	Recv() (*LsNodeEdgeEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLsNodeEdgesClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLsNodeEdgesClient) Recv() (*LsNodeEdgeEvent, error) {
	m := new(LsNodeEdgeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToPeers(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToPeersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[5], SubscriptionService_SubscribeToPeers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToPeersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToPeersClient interface {
	Recv() (*PeerEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToPeersClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToPeersClient) Recv() (*PeerEvent, error) {
	m := new(PeerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToTelemetryData(ctx context.Context, in *TelemetrySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToTelemetryDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[6], SubscriptionService_SubscribeToTelemetryData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToTelemetryDataClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToTelemetryDataClient interface {
	Recv() (*TelemetryEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToTelemetryDataClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToTelemetryDataClient) Recv() (*TelemetryEvent, error) {
	m := new(TelemetryEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	SubscribeToLsNodes(*TopologySubscription, SubscriptionService_SubscribeToLsNodesServer) error
	SubscribeToLsLinks(*TopologySubscription, SubscriptionService_SubscribeToLsLinksServer) error
	SubscribeToLsPrefixes(*TopologySubscription, SubscriptionService_SubscribeToLsPrefixesServer) error
	SubscribeToLsSrv6Sids(*TopologySubscription, SubscriptionService_SubscribeToLsSrv6SidsServer) error
	SubscribeToLsNodeEdges(*TopologySubscription, SubscriptionService_SubscribeToLsNodeEdgesServer) error
	SubscribeToPeers(*TopologySubscription, SubscriptionService_SubscribeToPeersServer) error
	SubscribeToTelemetryData(*TelemetrySubscription, SubscriptionService_SubscribeToTelemetryDataServer) error
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) SubscribeToLsNodes(*TopologySubscription, SubscriptionService_SubscribeToLsNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLsNodes not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLsLinks(*TopologySubscription, SubscriptionService_SubscribeToLsLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLsLinks not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLsPrefixes(*TopologySubscription, SubscriptionService_SubscribeToLsPrefixesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLsPrefixes not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLsSrv6Sids(*TopologySubscription, SubscriptionService_SubscribeToLsSrv6SidsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLsSrv6Sids not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLsNodeEdges(*TopologySubscription, SubscriptionService_SubscribeToLsNodeEdgesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLsNodeEdges not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToPeers(*TopologySubscription, SubscriptionService_SubscribeToPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToPeers not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToTelemetryData(*TelemetrySubscription, SubscriptionService_SubscribeToTelemetryDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTelemetryData not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_SubscribeToLsNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLsNodes(m, &subscriptionServiceSubscribeToLsNodesServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToLsNodesServer interface {
	Send(*LsNodeEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLsNodesServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLsNodesServer) Send(m *LsNodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLsLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLsLinks(m, &subscriptionServiceSubscribeToLsLinksServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToLsLinksServer interface {
	Send(*LsLinkEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLsLinksServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLsLinksServer) Send(m *LsLinkEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLsPrefixes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLsPrefixes(m, &subscriptionServiceSubscribeToLsPrefixesServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToLsPrefixesServer interface {
	Send(*LsPrefixEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLsPrefixesServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLsPrefixesServer) Send(m *LsPrefixEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLsSrv6Sids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLsSrv6Sids(m, &subscriptionServiceSubscribeToLsSrv6SidsServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToLsSrv6SidsServer interface {
	Send(*LsSrv6SidEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLsSrv6SidsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLsSrv6SidsServer) Send(m *LsSrv6SidEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLsNodeEdges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLsNodeEdges(m, &subscriptionServiceSubscribeToLsNodeEdgesServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToLsNodeEdgesServer interface {
	Send(*LsNodeEdgeEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLsNodeEdgesServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLsNodeEdgesServer) Send(m *LsNodeEdgeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToPeers(m, &subscriptionServiceSubscribeToPeersServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToPeersServer interface {
	Send(*PeerEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToPeersServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToPeersServer) Send(m *PeerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToTelemetryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TelemetrySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToTelemetryData(m, &subscriptionServiceSubscribeToTelemetryDataServer{ServerStream: stream})
}

type SubscriptionService_SubscribeToTelemetryDataServer interface {
	Send(*TelemetryEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToTelemetryDataServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToTelemetryDataServer) Send(m *TelemetryEvent) error {
	return x.ServerStream.SendMsg(m)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jagw.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToLsNodes",
			Handler:       _SubscriptionService_SubscribeToLsNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLsLinks",
			Handler:       _SubscriptionService_SubscribeToLsLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLsPrefixes",
			Handler:       _SubscriptionService_SubscribeToLsPrefixes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLsSrv6Sids",
			Handler:       _SubscriptionService_SubscribeToLsSrv6Sids_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLsNodeEdges",
			Handler:       _SubscriptionService_SubscribeToLsNodeEdges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToPeers",
			Handler:       _SubscriptionService_SubscribeToPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTelemetryData",
			Handler:       _SubscriptionService_SubscribeToTelemetryData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscriptionservice/subscriptionservice.proto",
}
