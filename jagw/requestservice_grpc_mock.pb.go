// Code generated by MockGen. DO NOT EDIT.
// Source: requestservice_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source requestservice_grpc.pb.go -destination requestservice_grpc_mock.pb.go -package jagw
//

// Package jagw is a generated GoMock package.
package jagw

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRequestServiceClient is a mock of RequestServiceClient interface.
type MockRequestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRequestServiceClientMockRecorder
}

// MockRequestServiceClientMockRecorder is the mock recorder for MockRequestServiceClient.
type MockRequestServiceClientMockRecorder struct {
	mock *MockRequestServiceClient
}

// NewMockRequestServiceClient creates a new mock instance.
func NewMockRequestServiceClient(ctrl *gomock.Controller) *MockRequestServiceClient {
	mock := &MockRequestServiceClient{ctrl: ctrl}
	mock.recorder = &MockRequestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestServiceClient) EXPECT() *MockRequestServiceClientMockRecorder {
	return m.recorder
}

// GetLsLinks mocks base method.
func (m *MockRequestServiceClient) GetLsLinks(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*LsLinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsLinks", varargs...)
	ret0, _ := ret[0].(*LsLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsLinks indicates an expected call of GetLsLinks.
func (mr *MockRequestServiceClientMockRecorder) GetLsLinks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsLinks", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsLinks), varargs...)
}

// GetLsNodeCoordinates mocks base method.
func (m *MockRequestServiceClient) GetLsNodeCoordinates(ctx context.Context, in *LsNodeCoordinatesRequest, opts ...grpc.CallOption) (*LsNodeCoordinatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsNodeCoordinates", varargs...)
	ret0, _ := ret[0].(*LsNodeCoordinatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodeCoordinates indicates an expected call of GetLsNodeCoordinates.
func (mr *MockRequestServiceClientMockRecorder) GetLsNodeCoordinates(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodeCoordinates", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsNodeCoordinates), varargs...)
}

// GetLsNodeEdges mocks base method.
func (m *MockRequestServiceClient) GetLsNodeEdges(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*LsNodeEdgeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsNodeEdges", varargs...)
	ret0, _ := ret[0].(*LsNodeEdgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodeEdges indicates an expected call of GetLsNodeEdges.
func (mr *MockRequestServiceClientMockRecorder) GetLsNodeEdges(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodeEdges", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsNodeEdges), varargs...)
}

// GetLsNodes mocks base method.
func (m *MockRequestServiceClient) GetLsNodes(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*LsNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsNodes", varargs...)
	ret0, _ := ret[0].(*LsNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodes indicates an expected call of GetLsNodes.
func (mr *MockRequestServiceClientMockRecorder) GetLsNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodes", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsNodes), varargs...)
}

// GetLsPrefixes mocks base method.
func (m *MockRequestServiceClient) GetLsPrefixes(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*LsPrefixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsPrefixes", varargs...)
	ret0, _ := ret[0].(*LsPrefixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsPrefixes indicates an expected call of GetLsPrefixes.
func (mr *MockRequestServiceClientMockRecorder) GetLsPrefixes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsPrefixes", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsPrefixes), varargs...)
}

// GetLsSrv6Sids mocks base method.
func (m *MockRequestServiceClient) GetLsSrv6Sids(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*LsSrv6SidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLsSrv6Sids", varargs...)
	ret0, _ := ret[0].(*LsSrv6SidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsSrv6Sids indicates an expected call of GetLsSrv6Sids.
func (mr *MockRequestServiceClientMockRecorder) GetLsSrv6Sids(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsSrv6Sids", reflect.TypeOf((*MockRequestServiceClient)(nil).GetLsSrv6Sids), varargs...)
}

// GetMeasurementDetails mocks base method.
func (m *MockRequestServiceClient) GetMeasurementDetails(ctx context.Context, in *MeasurementDetailsRequest, opts ...grpc.CallOption) (*MeasurementDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeasurementDetails", varargs...)
	ret0, _ := ret[0].(*MeasurementDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementDetails indicates an expected call of GetMeasurementDetails.
func (mr *MockRequestServiceClientMockRecorder) GetMeasurementDetails(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementDetails", reflect.TypeOf((*MockRequestServiceClient)(nil).GetMeasurementDetails), varargs...)
}

// GetMeasurements mocks base method.
func (m *MockRequestServiceClient) GetMeasurements(ctx context.Context, in *MeasurementsRequest, opts ...grpc.CallOption) (*MeasurementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeasurements", varargs...)
	ret0, _ := ret[0].(*MeasurementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurements indicates an expected call of GetMeasurements.
func (mr *MockRequestServiceClientMockRecorder) GetMeasurements(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurements", reflect.TypeOf((*MockRequestServiceClient)(nil).GetMeasurements), varargs...)
}

// GetPeers mocks base method.
func (m *MockRequestServiceClient) GetPeers(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (*PeerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPeers", varargs...)
	ret0, _ := ret[0].(*PeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockRequestServiceClientMockRecorder) GetPeers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockRequestServiceClient)(nil).GetPeers), varargs...)
}

// GetTelemetryData mocks base method.
func (m *MockRequestServiceClient) GetTelemetryData(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (*TelemetryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTelemetryData", varargs...)
	ret0, _ := ret[0].(*TelemetryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetryData indicates an expected call of GetTelemetryData.
func (mr *MockRequestServiceClientMockRecorder) GetTelemetryData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryData", reflect.TypeOf((*MockRequestServiceClient)(nil).GetTelemetryData), varargs...)
}

// MockRequestServiceServer is a mock of RequestServiceServer interface.
type MockRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRequestServiceServerMockRecorder
}

// MockRequestServiceServerMockRecorder is the mock recorder for MockRequestServiceServer.
type MockRequestServiceServerMockRecorder struct {
	mock *MockRequestServiceServer
}

// NewMockRequestServiceServer creates a new mock instance.
func NewMockRequestServiceServer(ctrl *gomock.Controller) *MockRequestServiceServer {
	mock := &MockRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestServiceServer) EXPECT() *MockRequestServiceServerMockRecorder {
	return m.recorder
}

// GetLsLinks mocks base method.
func (m *MockRequestServiceServer) GetLsLinks(arg0 context.Context, arg1 *TopologyRequest) (*LsLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsLinks", arg0, arg1)
	ret0, _ := ret[0].(*LsLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsLinks indicates an expected call of GetLsLinks.
func (mr *MockRequestServiceServerMockRecorder) GetLsLinks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsLinks", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsLinks), arg0, arg1)
}

// GetLsNodeCoordinates mocks base method.
func (m *MockRequestServiceServer) GetLsNodeCoordinates(arg0 context.Context, arg1 *LsNodeCoordinatesRequest) (*LsNodeCoordinatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsNodeCoordinates", arg0, arg1)
	ret0, _ := ret[0].(*LsNodeCoordinatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodeCoordinates indicates an expected call of GetLsNodeCoordinates.
func (mr *MockRequestServiceServerMockRecorder) GetLsNodeCoordinates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodeCoordinates", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsNodeCoordinates), arg0, arg1)
}

// GetLsNodeEdges mocks base method.
func (m *MockRequestServiceServer) GetLsNodeEdges(arg0 context.Context, arg1 *TopologyRequest) (*LsNodeEdgeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsNodeEdges", arg0, arg1)
	ret0, _ := ret[0].(*LsNodeEdgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodeEdges indicates an expected call of GetLsNodeEdges.
func (mr *MockRequestServiceServerMockRecorder) GetLsNodeEdges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodeEdges", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsNodeEdges), arg0, arg1)
}

// GetLsNodes mocks base method.
func (m *MockRequestServiceServer) GetLsNodes(arg0 context.Context, arg1 *TopologyRequest) (*LsNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsNodes", arg0, arg1)
	ret0, _ := ret[0].(*LsNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsNodes indicates an expected call of GetLsNodes.
func (mr *MockRequestServiceServerMockRecorder) GetLsNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsNodes", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsNodes), arg0, arg1)
}

// GetLsPrefixes mocks base method.
func (m *MockRequestServiceServer) GetLsPrefixes(arg0 context.Context, arg1 *TopologyRequest) (*LsPrefixResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsPrefixes", arg0, arg1)
	ret0, _ := ret[0].(*LsPrefixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsPrefixes indicates an expected call of GetLsPrefixes.
func (mr *MockRequestServiceServerMockRecorder) GetLsPrefixes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsPrefixes", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsPrefixes), arg0, arg1)
}

// GetLsSrv6Sids mocks base method.
func (m *MockRequestServiceServer) GetLsSrv6Sids(arg0 context.Context, arg1 *TopologyRequest) (*LsSrv6SidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLsSrv6Sids", arg0, arg1)
	ret0, _ := ret[0].(*LsSrv6SidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLsSrv6Sids indicates an expected call of GetLsSrv6Sids.
func (mr *MockRequestServiceServerMockRecorder) GetLsSrv6Sids(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLsSrv6Sids", reflect.TypeOf((*MockRequestServiceServer)(nil).GetLsSrv6Sids), arg0, arg1)
}

// GetMeasurementDetails mocks base method.
func (m *MockRequestServiceServer) GetMeasurementDetails(arg0 context.Context, arg1 *MeasurementDetailsRequest) (*MeasurementDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementDetails", arg0, arg1)
	ret0, _ := ret[0].(*MeasurementDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementDetails indicates an expected call of GetMeasurementDetails.
func (mr *MockRequestServiceServerMockRecorder) GetMeasurementDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementDetails", reflect.TypeOf((*MockRequestServiceServer)(nil).GetMeasurementDetails), arg0, arg1)
}

// GetMeasurements mocks base method.
func (m *MockRequestServiceServer) GetMeasurements(arg0 context.Context, arg1 *MeasurementsRequest) (*MeasurementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurements", arg0, arg1)
	ret0, _ := ret[0].(*MeasurementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurements indicates an expected call of GetMeasurements.
func (mr *MockRequestServiceServerMockRecorder) GetMeasurements(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurements", reflect.TypeOf((*MockRequestServiceServer)(nil).GetMeasurements), arg0, arg1)
}

// GetPeers mocks base method.
func (m *MockRequestServiceServer) GetPeers(arg0 context.Context, arg1 *TopologyRequest) (*PeerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", arg0, arg1)
	ret0, _ := ret[0].(*PeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockRequestServiceServerMockRecorder) GetPeers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockRequestServiceServer)(nil).GetPeers), arg0, arg1)
}

// GetTelemetryData mocks base method.
func (m *MockRequestServiceServer) GetTelemetryData(arg0 context.Context, arg1 *TelemetryRequest) (*TelemetryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryData", arg0, arg1)
	ret0, _ := ret[0].(*TelemetryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetryData indicates an expected call of GetTelemetryData.
func (mr *MockRequestServiceServerMockRecorder) GetTelemetryData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryData", reflect.TypeOf((*MockRequestServiceServer)(nil).GetTelemetryData), arg0, arg1)
}

// mustEmbedUnimplementedRequestServiceServer mocks base method.
func (m *MockRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRequestServiceServer")
}

// mustEmbedUnimplementedRequestServiceServer indicates an expected call of mustEmbedUnimplementedRequestServiceServer.
func (mr *MockRequestServiceServerMockRecorder) mustEmbedUnimplementedRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRequestServiceServer", reflect.TypeOf((*MockRequestServiceServer)(nil).mustEmbedUnimplementedRequestServiceServer))
}

// MockUnsafeRequestServiceServer is a mock of UnsafeRequestServiceServer interface.
type MockUnsafeRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRequestServiceServerMockRecorder
}

// MockUnsafeRequestServiceServerMockRecorder is the mock recorder for MockUnsafeRequestServiceServer.
type MockUnsafeRequestServiceServerMockRecorder struct {
	mock *MockUnsafeRequestServiceServer
}

// NewMockUnsafeRequestServiceServer creates a new mock instance.
func NewMockUnsafeRequestServiceServer(ctrl *gomock.Controller) *MockUnsafeRequestServiceServer {
	mock := &MockUnsafeRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRequestServiceServer) EXPECT() *MockUnsafeRequestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRequestServiceServer mocks base method.
func (m *MockUnsafeRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRequestServiceServer")
}

// mustEmbedUnimplementedRequestServiceServer indicates an expected call of mustEmbedUnimplementedRequestServiceServer.
func (mr *MockUnsafeRequestServiceServerMockRecorder) mustEmbedUnimplementedRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRequestServiceServer", reflect.TypeOf((*MockUnsafeRequestServiceServer)(nil).mustEmbedUnimplementedRequestServiceServer))
}
